language: python
sudo: false
dist: trusty
env:
  global:
  - secure: hnQJ45kvtEwUZjbbKbjBNDCDnJsp+fCy8ioKw2GV43+S9IpJVV4vqJwsdjPRjdQFB8nVdQTRmfAGPDjqzxO5OACPDBLi7kvl7IpKvZCRW43CVCT9z/bHTCKB5fdqJJgpV0laS9sbvncyjeKMA9l8hvwzyOFLRZ6zYORrBXO3VEieMGRmwTHp9ztbmpJiBTBvzRf3m2xqak9f2/P9JecBELJAfy7Zvcwx8TXOvevmcniJRxPFqgr9iHHAyCU7Agw10j3+rqTOxWEw6iiyD73ZE5sRN3Lf1K2BqehdVAdpdxZpLbdccdTOOm5RpW3OtKhMCGDxOgXhSf1B+kDP/a7ZNAC717QXSp6VXofTkYhE1wvLvj9LTE8sAcWkpItZ8qLYDdmbjPfb5sGhxQhKwUWl8t+DRovTJBi5ogQNOe9V2RMrK79Wpx472GwplsWe+ZHjJ8C6Yyt7F+SruCHmGQr+XmQKgEjDT48gY1Icso7DcpFCvIFrjB2Iw/KsOU2G1BkDdHrseurXGG5V4jriWJFW5XnzrajJYXjAy5cVfuTBoyvzTXM+QM54NhzFNyhnaNKYVhCHb3QZka2BHA8ck79+jMRT7S0pZC31DvqaBEDwEIGORjhxtAYRmfC/KlvuJHmW5yMldMdDC3T6e0O1t3IZvkTF8+gZF3tMr4VZseX2OhE=
  - secure: cTn5NmsVl6LWJNP1uwJkDv7qsJzJnTd2xI/I47+Cy9hnuifU+/YJSmP7m3TT+LDvMduo2GWLHgUuCs3qap8dnKaSlkIn5xzsWVbSgMmNbyNGxbKn/YA5PDD4ffx9WG8/poaAEYIZaP33VyVqV1eWQMSwYKn8t+11QRe5cfZRg4ImRxJNwJ/JGvVGJv7eJOMrGlW/6Vu76j3imzfshL2QtQWwbdgTp2dsRD80oAAx3K22hPgc5MNUSc375wtOUgEVRWENGbM6+oKXeG9mJgxbKKtAW+U6VumazSi6nYmGWez9oN9Ku2gdZ8iLhPkR6vUR24pQcH+HnZOLozNvZQOoH4JsPKQLzos3hOU7Wra0KkSJ26sk4CFhgw0sW9ZJt+FNfPvgUiidfMy0Xf03FyAKsvPD20ErQpZ02+rjIjYf8JHBsknpvkyMik5iNPr+wBKpnvvrkaMELct7yYpp1X2zzt7JWZ8OamD7019qmNCLvGTbXvWgiq4VlS3cpltdHuUzrX0EtgJtm1PX8HIZhYoVBgK3UY3q6ifCzDQIMSYveArioraBmES/+qtoI2DgQKtcm/J45/BYLKSGTARasNSpyMm1coMDI+wHz20SFhyyhjE3nh+QyQDpZlz3Kn8Oq8l2VeAwvjsWxYML1G5795vNbqLAJ4SpCy4zdGbEd071L5A=
  - secure: nhyRoHoqYYZmLn0Y6NJ4J5CCN6aicdRFAQOC87DNw7YQq5dwdSaEyUMcVBVyCJZAQLdcqKRtWgiNnphixC4y9g95i7aMPQoODeIBG+yD5Y7j+jfxKo79td3d2alBM5mmvN5lrqoF1Ykp8USYo8KZNd4omXJ6zKOohjegrHGlsO9iW1JW9F10QaJvpB3DzPVIFekbrej1em9EUG3oMTBO1MyUItCo6fMVwQzD/Rl8VNskik5KzoOqzZAdnc8wVut0TckaaaL2puHRvt0ETWUkYPTnCybVClGQkcbCf/AL7psyG8/VYazDRk0bLmaQcyuylKbAa1nDWnPezXTdSl3a9ZfeEzCRBsTj0MB36o3uYTViyG0RwkskYCulw+npnn2q/JjCoFYmQay+FEpNGKVKHkoh7q32oIaiGTGXdFidui/sW1NYbhbjCYUdK5surKgAmaewT2JbDjAkUnqJsvR18lMBBEVVHVP19FiEYBzhRlxu2a43lrb+3Op5pjkiZKkfWi/vmdEuXrHhYCT/BmQyFlqlIIuoX7A0xHTGlEFEPk7fRH1vZo59VXdIXg9s/rJGVVkq7sAMMUD+xAdK3zz3xUxIYftT2nBm2SNGJO4yoEDaxtyXHVmn4FLb85slDk++hXnTeXMDo5+uQDZLTpiFt07Pof/h2ufQIzdyMhA4Tvo=
matrix:
  fast_finish: true
  include:
  - python: 3.6
    env: TEST_TARGET=default
  - python: 3.6
    env: TEST_TARGET=coding_standards
  - python: 3.6
    env: TEST_TARGET=docs
  allow_failures:
  - python: 3.6
    env: TEST_TARGET=coding_standards
before_install:
- |
  URL="http://bit.ly/miniconda"
  echo ""
  if [ ! -f $HOME/miniconda/bin/conda ] ; then
    echo "Fresh miniconda installation."
    wget $URL -O miniconda.sh
    rm -rf $HOME/miniconda
    bash miniconda.sh -b -p $HOME/miniconda
  fi
- export PATH="$HOME/miniconda/bin:$PATH"
- conda update conda --yes
- conda config --set show_channel_urls true
- conda config --add channels conda-forge --force
- conda create --yes -n TEST python=$TRAVIS_PYTHON_VERSION --file requirements.txt
  --file requirements-dev.txt
- source activate TEST
install:
- python setup.py sdist && version=$(python setup.py --version) && pushd dist  &&
  pip install yodapy-${version}.tar.gz && popd
before_script:
- export DISPLAY=:99.0
- sh -e /etc/init.d/xvfb start
- sleep 3
script:
- if [[ $TEST_TARGET == 'default' ]]; then cp -r tests /tmp && cd /tmp ; pytest --cov-report
  term-missing --cov=yodapy --cov-config .coveragerc -vv tests ; fi
- if [[ $TEST_TARGET == 'coding_standards' ]]; then flake8 --max-line-length=105 yodapy
  ; fi
- if [[ $TEST_TARGET == 'docs' ]]; then set -e ; conda install --yes doctr ; pushd
  docs ; make clean html linkcheck ; popd ; python -m doctr deploy --sync .; python
  -m doctr deploy --sync --no-require-master --built-docs docs/build/html "docs-$TRAVIS_BRANCH"
  ; fi
after_success:
- coveralls
